Proposal for Assembly Language Sugar.

Enhance the MV instruction so that it also
does all of the quick memory operations
that LD and ST and SET currently do.

All existing MV instructions remain.

But there is a new option for the "M" register.
You can call it "*W" (as in C, the thing pointed to by W).

The quick memory addresses are now names Q0..15
instead of just the numbers 0..15.

        OLD             NEW
        (still works)   (also works)
        -------------   -------------------
        mv a, m         mv a, *w
        mv m, b         mv *w, b

        sta 8           mv a, q8
        ldb 14          mv q14, b

        seta 8          mv 8, a

We can explain that any of these can be
moved to any other in this set
   { A B H L *W E F G }
and any of { A B H L } can be moved to or from the Q registers,
and any of { A B H L } can be set with an immediate byte
(by specifying a numeric expression, instead of a register name).

(Maybe this nomenclature:
   Primay registers { A, B, H, L }
   Secondary registers { *W E F G } (all have side-effects)
   Quick registers { Q0 .. Q15 }
)

The disadvantage is that the register names
and quick names will become sacred.
You will not be able to define them to be
something else, because now the MV instruction
can take either number or labels defined to numbers
or register names, but it means something very
different with the register names.

These names will be reserved, ignoring case:
  A B H L W E F G Q0..Q15
  a b h l w e f g q0..q15

It will be simple enough to throw an error if someone
tries to define any of those as labels.
